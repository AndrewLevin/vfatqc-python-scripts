sudo: required

language: generic

stages:
  - setup
  - compile
  - test
  - coverage
  - buildrpm
  - name: docs
    if: ((branch = master) OR (tag =~ ^v?(\d+).(\d+).(\d+)(-(alpha|dev|pre|rc))?((\d+$)|(-git[0-9a-z]{6,8})?)$))
    # tags: true
  - name: prerelease
    if: (tag =~ ^v?(\d+).(\d+).(\d+)(-(pre|rc))((\d+$)|(-git[0-9a-z]{6,8})?)$)
  - name: devrelease
    if: (tag =~ ^v?(\d+).(\d+).(\d+)(-(alpha|dev))((\d+$)|(-git[0-9a-z]{6,8})?)$)
  - name: release
    if: ((branch = master) AND (tag =~ ^v?(\d+).(\d+).(\d+)(-git[0-9a-z]{6,8})?)$))
  - name: deploy
    if: tag =~ ^v?(\d+).(\d+).(\d+)(-(alpha|dev|pre|rc))?((\d+$)|(-git[0-9a-z]{6,8})?)$

env: ## this is *only* for the built-in 'test' stage, doesn't currently transfer to other stages, beta feature
  global:
    ## Encrypted variables:
      ##  * CHANGELOG_GITHUB_TOKEN: for running github_changelog_generator without API rate limits
    secure: "v++lbGb9+j0SpvyVtXo2/zS0GTlnjMsCF8KFrv74wXdbUmdXT8AIonJXmgVjkO5NuiK52v2IqhT162VlmAFqtkZjHa4QHug1SPT6CgF+eBBlfJ86lQqB2NO7dnn8ppBeranQIwIZr8Tms4fByk2M4fIHbfBPat0/rTVtMncmTQGPe0f8PXvNqAl8ArxaJMnDlmjvOyMgzMJhxkYbtVek23sD9a/anf6IhFInGPk36fKavb+oqTKv7kSO/3st8ls2wcT8CDj05TgfDR0kZNvymiM0+L9beSx4vxnVvYddum5KqJkU5MCLisGVtv6p+jYCA3v+Qtm9wV2DEyynt1NXY7V8uJpfAypjy/NESNPbjShlnOn3rv9jcJ8/kNGWTQwqhuFy2v6Ng58h6VwHMr/fBd+np1yM4cKxNM5o9/0/7CuBkunJD1Lvdq01rUeCljtDQaM7T7CK8en3r1gPnVsll/H6YZ5OL5uqlx0ybxd8eWZ9cuIVlGEeINW/mqIFMyY62o1RK76cUbvq5NtTrioyeRtwIa6b6ngjeH76WBuHC+HVDe6J4qyX75C0sKjKIF6HdP9nt2Psrhb+RvqlDT127CPKJ1mO4S3BEuobzO99JQU4LhyDgKvR47D/N4jzl5EojjgqKShORuHJKNzX8MCQZXCRmqw/1mpmc7/lPwxrclQ="
    
  matrix:
    - OS_TYPE=centos PY_VER=python OS_VERSION=6 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:slc6 ROOT_VER=v5.34.36-gcc4.4
    # - OS_TYPE=centos PY_VER=python2.6 OS_VERSION=6 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:slc6
    # - OS_TYPE=centos PY_VER=python2.7 OS_VERSION=6 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:slc6
    # - OS_TYPE=centos PY_VER=python3.2 OS_VERSION=6 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:slc6
    # - OS_TYPE=centos PY_VER=python3.3 OS_VERSION=6 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:slc6
    # - OS_TYPE=centos PY_VER=python3.4 OS_VERSION=6 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:slc6
    # - OS_TYPE=centos PY_VER=python3.5 OS_VERSION=6 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:slc6
    # - OS_TYPE=centos PY_VER=pypy  OS_VERSION=6 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:slc6
    # - OS_TYPE=centos PY_VER=pypy3 OS_VERSION=6 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:slc6
    # - OS_TYPE=centos PY_VER=pypy OS_VERSION=6 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:slc6 ROOT_VER=v5.34.36-gcc4.4

    ### CC7 jobs
    - OS_TYPE=centos PY_VER=python OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7 ROOT_VER=v5.34.36-gcc4.8
    - OS_TYPE=centos PY_VER=python OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7 ROOT_VER=v6.10.08-gcc4.8
    - OS_TYPE=centos PY_VER=python OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7 ROOT_VER=v6.12.06-gcc4.8
    # - OS_TYPE=centos PY_VER=python2.6 OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7
    # - OS_TYPE=centos PY_VER=python2.7 OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7
    # - OS_TYPE=centos PY_VER=python3.2 OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7
    # - OS_TYPE=centos PY_VER=python3.3 OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7
    # - OS_TYPE=centos PY_VER=python3.4 OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7
    # - OS_TYPE=centos PY_VER=python3.5 OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7
    # - OS_TYPE=centos PY_VER=pypy  OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7
    # - OS_TYPE=centos PY_VER=pypy OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7 ROOT_VER=v5.34.36-gcc4.8
    # - OS_TYPE=centos PY_VER=pypy OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7 ROOT_VER=v6.10.08-gcc4.8
    # - OS_TYPE=centos PY_VER=pypy OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7 ROOT_VER=v6.12.06-gcc4.8
    # - OS_TYPE=centos PY_VER=pypy3 OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7

services:
  - docker

before_install:
  ## steps for all stages
  # steps for specific stages
  - ./.ci/docker.sh ${OS_VERSION} ${PY_VER} ${DOCKER_IMAGE} setup
  - sleep 2
  - ./.ci/docker.sh ${OS_VERSION} ${PY_VER} ${DOCKER_IMAGE} start
  - DOCKER_CONTAINER_ID=$(docker ps | grep ${DOCKER_IMAGE} | awk '{print $1}')
  - echo DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID

# Stages run in their own VMs, nothing gets transferred from stage to stage
script:
  - echo 'Running test stage on docker container $DOCKER_CONTAINER_ID'
  - docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -ec ". /home/daqbuild/vfatqc-python-scripts/.ci/test_on_docker.sh ${OS_VERSION} ${PY_VER} ${ROOT_VER}"

# How to link the environments/outputs from above with the jobs below?
.rpmbuild: &rpmbuild_template
  before_install:
    - ./.ci/docker.sh ${OS_VERSION} ${PY_VER} ${DOCKER_IMAGE} setup
    - sleep 2
    - ./.ci/docker.sh ${OS_VERSION} ${PY_VER} ${DOCKER_IMAGE} start
    - DOCKER_CONTAINER_ID=$(docker ps | grep ${DOCKER_IMAGE} | awk '{print $1}')
    - echo DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID

  script:
    - echo 'Running build stage on docker container $DOCKER_CONTAINER_ID'
    - docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -ec "echo running gcg/github_changelog_generator to generate updated ChangeLog"
    - docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -ec "touch /home/daqbuild/vfatqc-python-scripts/CHANGELOG.md"
    - docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -ec "cd /home/daqbuild/vfatqc-python-scripts; make && make rpm "
    - docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -ec "cd /home/daqbuild/vfatqc-python-scripts; rpm -q --filesbypkg -p rpm/*.rpm"
    - ls -laZ rpm
    - find ./rpm -iname '*.rpm' -o -iname '*.tar.gz' -o -iname '*.tbz2'

  after_success:
    - ./.ci/docker.sh ${OS_VERSION} ${PY_VER} ${DOCKER_IMAGE} stop

.release: &release_template
  # publish to Github releases
  provider: releases
  api_key:
    secure: "GITHUB OAUTH TOKEN"
  file_glob: true
  file:
    - README.md
    - CHANGELOG.md
    # - docs #? or release docs somewhere else, and have this mentioned in the README
    - ./rpm/*.tar.gz
    - ./rpm/*.tgz
    - ./rpm/*.tbz2
    - ./rpm/*.rpm
  ## pre-releases and draft releases for tags with pre/alpha/dev/gitHASH in the name
  # draft: true # for tags with dev/alpha in the name, or
  # prerelease: true # for tags with pre in the name
  ## only deploy full release when the tag exactly matches vX.Y.Z (with or without the v)
  prerelease: false # for tags with pre in the name
  draft: false # for tags with pre in the name
  skip_cleanup: true
  on:
    repo: cms-gem-daq-project/vfatqc-python-scripts
    branch: master
    tags: true
    
jobs:
  include:
    - stage: build
      env:
        - OS_TYPE=centos PY_VER=python OS_VERSION=6 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:slc6
      <<: *rpmbuild_template
    - stage: build
      env:
        - OS_TYPE=centos PY_VER=python OS_VERSION=7 DOCKER_IMAGE=gitlab-registry.cern.ch/sturdy/gemdaq_ci_worker/extrapy/withroot:cc7
      <<: *rpmbuild_template
    - stage: docs
      before_script: skip
      before_install: skip
      script:
        # - docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -ec "echo Building documentation"
        - ls -laZ
      after_success: skip

    - stage: coverage
      before_script: skip
      before_install: skip
      script: skip
      after_success:
        - sudo pip install -U codecov
#        - coverage run -a scripta.py
        - codecov
        - bash <(curl -s https://codecov.io/bash) && echo "Uploaded code coverage"
    # - stage: prerelease
    #   script:
    #     - docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -ec "echo running gcg to generate changelog"
    #   deploy:
    #     - <<: *release_template
    #       prerelease: true # for tags with dev/alpha in the name, or
    #       # on:
    #       #   repo: jsturdy/vfatqc-python-scripts
    #       #   tags: true

    #   after_success: skip
    # - stage: devrelease
    #   script:
    #     - docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -ec "echo running gcg to generate changelog"
    #   deploy:
    #     - <<: *release_template
    #       draft: true # for tags with dev/alpha in the name, or
    #   after_success:
    # - stage: release
    #   script:
    #     - docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -ec "echo running gcg to generate changelog"
    #   deploy:
    #     - <<: *release_template
    #   after_success: skip
    # - stage: deploy
    #   ## push docs to SaaS docs website, readthedocs style, with versioning
    #   ## push RPMs to repo on openstack SaaS, updates and devel-testing depending on tag
    #   before_script: skip
    #   before_install: skip
    #   - script: skip
    #   after_success: skip
    #   # before_deploy: skip
    #   # after_deploy: skip

## Only want to run the deploy following the build stage, with the artifacts, and maybe from docs
# before_deploy:
#   # Set up git user name and tag this commit
#   - git config --local user.name "YOUR GIT USER NAME"
#   - git config --local user.email "YOUR GIT USER EMAIL"
#   # ?create the changelog
#   # ?update release notes
#   # ?run our cmsgemostag script instead?
#   # Sign the tags
#   - git tag "$(date +'%Y%m%d%H%M%S')-$(git log --format=%h -1)"

# after_deploy: skip

## Defaults, applied to the 'test' stage
after_success:
  - ./.ci/docker.sh ${OS_VERSION} ${PY_VER} ${DOCKER_IMAGE} stop

after_failure: skip

after_script: skip
